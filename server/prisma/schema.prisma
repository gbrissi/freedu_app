generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Option {
  MISINFORMATION
  VIOLENT_CONTENT
  INAPPROPRIATE_NAME
  OTHER
}

model Post {
  id            Int          @id @default(autoincrement())
  author        User         @relation(fields: [authorId], references: [id])
  authorId      Int          @unique
  tags          Tag[]
  answers       Answer[]
  votes         Vote[]
  reports       Report[]
  subject       String       @db.VarChar(255)
  content       String?      @db.Text
  published     Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  answerComment PostComment?
}

model PostComment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int      @unique
  votes     Vote[]
  reports   Report[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int      @unique
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(255)
  post      Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  id              Int            @id @default(autoincrement())
  value           Int
  author          User           @relation(fields: [authorId], references: [id])
  authorId        Int            @unique
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  post            Post?          @relation(fields: [postId], references: [id])
  postId          Int?
  answer          Answer?        @relation(fields: [answerId], references: [id])
  answerId        Int?
  answerComment   AnswerComment? @relation(fields: [answerCommentId], references: [id])
  answerCommentId Int?
  postComment     PostComment?   @relation(fields: [postCommentId], references: [id])
  postCommentId   Int?
}

model Answer {
  id            Int            @id @default(autoincrement())
  content       String         @db.Text
  author        User           @relation(fields: [authorId], references: [id])
  authorId      Int            @unique
  votes         Vote[]
  reports       Report[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  post          Post           @relation(fields: [postId], references: [id])
  postId        Int            @unique
  answerComment AnswerComment?
}

model AnswerComment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int      @unique
  votes     Vote[]
  reports   Report[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answer    Answer   @relation(fields: [answerId], references: [id])
  answerId  Int      @unique
}

// TODO: Change this shit.
model Report {
  id              Int            @id @default(autoincrement())
  option          Option
  reason          String         @db.VarChar(255)
  author          User           @relation(fields: [authorId], references: [id])
  authorId        Int            @unique
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  post            Post?          @relation(fields: [postId], references: [id])
  postId          Int?
  answer          Answer?        @relation(fields: [answerId], references: [id])
  answerId        Int?
  answerComment   AnswerComment? @relation(fields: [answerCommentId], references: [id])
  answerCommentId Int?
  postComment     PostComment?   @relation(fields: [postCommentId], references: [id])
  postCommentId   Int?
}

model PictureReferences {
  id        Int      @id @default(autoincrement())
  small     String   @db.VarChar(255)
  thumbnail String   @db.VarChar(255)
  original  String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  picture   Picture?
}

model Picture {
  id        Int               @id @default(autoincrement())
  name      String            @db.VarChar(255)
  filetype  String            @db.VarChar(255)
  urls      PictureReferences @relation(fields: [urlsId], references: [id])
  urlsId    Int               @unique
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  user      User?
}

model User {
  id            Int            @id @default(autoincrement())
  username      String         @unique @db.VarChar(255)
  password      String
  picture       Picture?       @relation(fields: [pictureId], references: [id])
  pictureId     Int?           @unique
  name          String         @db.VarChar(255)
  email         String?        @db.VarChar(255)
  // devices       Device[]
  // notifications Notification[]
  description   String?        @db.Text
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  post          Post?
  vote          Vote?
  answer        Answer?
  report        Report?
  answerComment AnswerComment?
  postComment   PostComment?
  blocked       Blocked?
}

model Blocked {
  id        Int      @id @default(autoincrement())
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
}

// model Profile {
//  id     Int     @id @default(autoincrement())
//  bio    String?
//  user   User    @relation(fields: [userId], references: [id])
//  userId Int     @unique
// }

// model User {
//  id      Int      @id @default(autoincrement())
//  email   String   @unique
//  name    String?
//  posts   Post[]
//  profile Profile?
// }
